import os
import re
import logging
import signal
import sys
from datetime import datetime
from typing import Dict, List, Optional, Tuple

import telebot
from telebot import types
import gspread
from google.oauth2.service_account import Credentials

import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format=config.LOG_FORMAT
)
logger = logging.getLogger(__name__)

class SalesBot:
    def __init__(self):
        self.bot_token = config.TELEGRAM_BOT_TOKEN
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        self.bot = telebot.TeleBot(self.bot_token)
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–∏—Ä–∞–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ polling, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 409 Conflict
        try:
            self.bot.remove_webhook()
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            import time
            time.sleep(1)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å webhook: {e}")
        self.sheets_id = config.GOOGLE_SHEETS_ID
        self.sheet = None
        self.stats = {
            'total_usdt': 0,
            'total_rub': 0,
            'total_sales': 0,
            'sales_by_payment': {}
        }

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        self.comment_delimiters = [' -- ', ' ‚Äî ', ' ‚Äì ', ' | ', ' / ', '  ']
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞/—Ç—Ä–∏–≥–≥–µ—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Å—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        self.comment_keywords = [
            '–º–±', '–º–æ–∂–µ—Ç', '–≤–æ–∑–º–æ–∂–Ω–æ', '–≤–µ—Ä–æ—è—Ç–Ω–æ', '–Ω–∞–≤–µ—Ä–Ω', '—Å–∫–æ—Ä–µ–µ',
            '–∫–æ–º–º–µ–Ω—Ç', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä', '–ø—Ä–∏–º–µ—á–∞–Ω', '–∑–∞–º–µ—Ç', 'note', 'comment',
            '–µ—â—ë', '–µ—â–µ', '–∫—É–ø–∏—Ç', '–¥–æ–ø', '–¥–æ–ø.', '+', '–ø–æ—Ç–æ–º'
        ]

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
        self.channel_aliases = {
            # —Ä—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è ‚Üí –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è
            '—Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å': '–†—É—Å—Å–∫–∏–π –ë–∏–∑–Ω–µ—Å | –≠–∫–æ–Ω–æ–º–∏–∫–∞',
            '—Ä—É—Å—Å–∫–∏–π  –±–∏–∑–Ω–µ—Å': '–†—É—Å—Å–∫–∏–π –ë–∏–∑–Ω–µ—Å | –≠–∫–æ–Ω–æ–º–∏–∫–∞',
            '—Ä—É—Å—Å–∫–∏–π-–±–∏–∑–Ω–µ—Å': '–†—É—Å—Å–∫–∏–π –ë–∏–∑–Ω–µ—Å | –≠–∫–æ–Ω–æ–º–∏–∫–∞',
            '—Ä–±': '–†—É—Å—Å–∫–∏–π –ë–∏–∑–Ω–µ—Å | –≠–∫–æ–Ω–æ–º–∏–∫–∞',
            'rb': '–†—É—Å—Å–∫–∏–π –ë–∏–∑–Ω–µ—Å | –≠–∫–æ–Ω–æ–º–∏–∫–∞',
            '—Ä—É—Å–±–∏–∑–Ω–µ—Å': '–†—É—Å—Å–∫–∏–π –ë–∏–∑–Ω–µ—Å | –≠–∫–æ–Ω–æ–º–∏–∫–∞'
        }

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã
        self.payment_type_aliases = {
            '—Å–±–ø': '–°–ë–ü',
            '–∫–∞—Ä—Ç–∞': '–ö–∞—Ä—Ç–∞',
            '–∫—Ä–∏–ø—Ç–∞': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
            '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
            '–∏–ø': '–ò–ü'
        }

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω—è—è/–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è
        self.internal_external_aliases = {
            '–≤–Ω–µ—à–∫–∞': '–í–Ω–µ—à–Ω—è—è',
            '–≤–Ω–µ—à–Ω—è—è': '–í–Ω–µ—à–Ω—è—è',
            '–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è',
            '–≤–Ω—É—Ç—Ä–µ–Ω—è—è': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è',
            '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è',
            '–≤–Ω—É—Ç—Ä—è–Ω–∫–∞': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
        self._setup_google_sheets()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()

    def _split_channel_and_comment(self, channel_with_comment: str):
        """–û—Ç–¥–µ–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (channel, comment). –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç comment=''"""
        text = channel_with_comment.strip()
        for delim in self.comment_delimiters:
            if delim in text:
                parts = text.split(delim, 1)
                return self._normalize_channel_name(parts[0].strip()), parts[1].strip()
        # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        lowered = text.lower()
        keyword_positions = [lowered.find(' ' + kw) for kw in self.comment_keywords]
        keyword_positions = [pos for pos in keyword_positions if pos > 0]
        if keyword_positions:
            split_pos = min(keyword_positions)
            return self._normalize_channel_name(text[:split_pos].strip()), text[split_pos:].strip()
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç
        return self._normalize_channel_name(text), ''

    def _normalize_channel_name(self, channel_name: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é —Å–∏–Ω–æ–Ω–∏–º–æ–≤/–∞–ª–∏–∞—Å–æ–≤."""
        key = channel_name.strip().lower()
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/–¥–µ—Ñ–∏—Å—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        compact_key = key.replace('  ', ' ').replace('-', ' ').strip()
        compact_key = ' '.join(compact_key.split())
        if key in self.channel_aliases:
            return self.channel_aliases[key]
        if compact_key in self.channel_aliases:
            return self.channel_aliases[compact_key]
        return channel_name

    def _normalize_payment_type(self, payment_type: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–∏–ø –æ–ø–ª–∞—Ç—ã."""
        if not payment_type:
            return ""
        key = payment_type.strip().lower()
        return self.payment_type_aliases.get(key, payment_type)

    def _normalize_internal_external(self, internal_external: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–Ω–µ—à–Ω—è—è/–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è."""
        if not internal_external:
            return ""
        key = internal_external.strip().lower()
        return self.internal_external_aliases.get(key, internal_external)

    def _send_notification(self, data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç/—Ç–æ–ø–∏–∫"""
        if not config.NOTIFICATION_CHAT_ID:
            logger.info("NOTIFICATION_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        logger.info(f"=== –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===")
        logger.info(f"NOTIFICATION_CHAT_ID: {config.NOTIFICATION_CHAT_ID}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä @mqwou
            manager_username = data.get('manager_username', 'unknown')
            if manager_username == 'mqwou':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è @mqwou —Å –∫–æ–º–∏—Å—Å–∏–µ–π 5%
                commission = data['amount'] * 0.05
                final_amount = data['amount'] - commission
                notification_text = f"""
‚úÖ <b>–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ {data['amount']} {data['currency']} –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @{manager_username}</b>

üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {data['manager']}
üìÖ <b>–î–∞—Ç–∞:</b> {data['date']}
üïê <b>–í—Ä–µ–º—è:</b> {data['time']}
üí∞ <b>–°—É–º–º–∞:</b> {data['amount']} {data['currency']} - 5% –∫–æ–º–∏—Å—Å–∏—è = {final_amount:.2f} {data['currency']}
üí≥ <b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> {data.get('payment_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìã <b>–§–æ—Ä–º–∞—Ç:</b> {data.get('format', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè¢ <b>–í–Ω–µ—à–Ω—è—è/–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è:</b> {data.get('internal_external', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
                """
            else:
                # –û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
                notification_text = f"""
‚úÖ <b>–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ {data['amount']} {data['currency']} –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @{manager_username}</b>

üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {data['manager']}
üìÖ <b>–î–∞—Ç–∞:</b> {data['date']}
üïê <b>–í—Ä–µ–º—è:</b> {data['time']}
üí∞ <b>–°—É–º–º–∞:</b> {data['amount']} {data['currency']}
üí≥ <b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> {data.get('payment_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìã <b>–§–æ—Ä–º–∞—Ç:</b> {data.get('format', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè¢ <b>–í–Ω–µ—à–Ω—è—è/–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è:</b> {data.get('internal_external', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì∫ <b>–ö–∞–Ω–∞–ª:</b> {data['channel']}
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data.get('comment', '–ù–µ—Ç')}
                """
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID —Ç–æ–ø–∏–∫–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            if '#' in config.NOTIFICATION_CHAT_ID:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫
                chat_id, topic_id = config.NOTIFICATION_CHAT_ID.split('#')
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫: chat_id={chat_id}, topic_id={topic_id}")
                
                self.bot.send_message(
                    chat_id,
                    notification_text,
                    parse_mode='HTML',
                    message_thread_id=int(topic_id)
                )
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ {config.NOTIFICATION_CHAT_ID}")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–π —á–∞—Ç
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç: {config.NOTIFICATION_CHAT_ID}")
                
                self.bot.send_message(
                    config.NOTIFICATION_CHAT_ID,
                    notification_text,
                    parse_mode='HTML'
                )
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {config.NOTIFICATION_CHAT_ID}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            logger.error(f"NOTIFICATION_CHAT_ID: {config.NOTIFICATION_CHAT_ID}")
        
        logger.info(f"================================")
        
    def _setup_google_sheets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω—ã –ª–∏ Google Sheets
        if os.getenv('DISABLE_GOOGLE_SHEETS', '').lower() in ['true', '1', 'yes']:
            logger.info("Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DISABLE_GOOGLE_SHEETS")
            self.sheet = None
            return
            
        try:
            import json
            creds_data = None

            # 1) –ü—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å –∫—Ä–µ–¥—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É–¥–æ–±–Ω–æ –¥–ª—è Railway)
            creds_env = os.getenv('GOOGLE_CREDENTIALS_JSON')
            if creds_env:
                try:
                    creds_data = json.loads(creds_env)
                except json.JSONDecodeError:
                    # –í–æ–∑–º–æ–∂–Ω–æ, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ \n –º–µ—à–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–Ω–æ–≤–∞
                    try:
                        fixed = creds_env.replace('\\n', '\n')
                        creds_data = json.loads(fixed)
                    except Exception as e:
                        raise ValueError(f"GOOGLE_CREDENTIALS_JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {e}")
            else:
                # 2) –ò–Ω–∞—á–µ –∏—â–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
                creds_file = config.CREDENTIALS_FILE
                if not os.path.exists(creds_file):
                    creds_file = os.path.join(config.CREDENTIALS_FOLDER, 'credentials.json')

                if not os.path.exists(creds_file):
                    logger.info("–§–∞–π–ª —Å –∫—Ä–µ–¥–∞–º–∏ Google API –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Google Sheets")
                    self.sheet = None
                    return

                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª —Å –∫—Ä–µ–¥–∞–º–∏: {creds_file}")
                try:
                    with open(creds_file, 'r', encoding='utf-8') as f:
                        creds_data = json.load(f)
                except json.JSONDecodeError as e:
                    logger.warning(f"–§–∞–π–ª credentials.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}")
                    self.sheet = None
                    return

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞
            required_fields = ['type', 'project_id', 'private_key', 'client_email']
            missing_fields = [field for field in required_fields if field not in creds_data]
            if missing_fields:
                logger.warning(f"–í credentials –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
                self.sheet = None
                return
            if creds_data.get('type') != 'service_account':
                logger.warning("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (type: 'service_account')")
                self.sheet = None
                return

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ private_key (—á–∞—Å—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏–∑-–∑–∞ \n)
            if isinstance(creds_data.get('private_key'), str):
                creds_data['private_key'] = creds_data['private_key'].replace('\\n', '\n')

            creds = Credentials.from_service_account_info(creds_data, scopes=config.SHEET_SCOPE)
            gc = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.sheet = gc.open_by_key(self.sheets_id).sheet1
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
            first_row = self.sheet.get('A1:G1')
            if not first_row or not first_row[0] or first_row[0][0] != '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å':
                # –û—á–∏—â–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if first_row and first_row[0]:
                    self.sheet.delete_rows(1)
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                self.sheet.insert_row(config.SHEET_HEADERS, 1)
                
            logger.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: {e}")
            logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏ - –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É")
            self.sheet = None
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.bot.message_handler(commands=['start'])
        def start_command(message):
            self._handle_start(message)
        
        @self.bot.message_handler(commands=['stats'])
        def stats_command(message):
            self._handle_stats(message)
        
        @self.bot.message_handler(commands=['resetstats'])
        def reset_stats_command(message):
            self._handle_reset_stats(message)
        
        @self.bot.message_handler(commands=['money'])
        def money_command(message):
            self._handle_money(message)
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            self._handle_sales_message(message)
    
    def _handle_start(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
        logger.info(f"=== ID –ß–ê–¢–ê ===")
        logger.info(f"Chat ID: {message.chat.id}")
        logger.info(f"Chat Type: {message.chat.type}")
        if hasattr(message, 'message_thread_id') and message.message_thread_id:
            logger.info(f"Topic ID: {message.message_thread_id}")
            logger.info(f"Full ID: {message.chat.id}#{message.message_thread_id}")
        logger.info(f"===============")
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", 
            url=f"https://docs.google.com/spreadsheets/d/{self.sheets_id}"
        ))
        
        welcome_text = f"""
üëæ <b>–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ–∫–ª–∞–º—ã Dox Media</b>

// <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ <code>@–∫–æ–º—É –ø—Ä–æ–¥–∞–ª–∏ (–∏–ª–∏ –±–µ–∑ @, –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–º–∏–ª–∏—è) –¥–∞—Ç–∞ –≤—Ä–µ–º—è —Å—É–º–º–∞ —Ç–∏–ø_–æ–ø–ª–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç –≤–Ω–µ—à–Ω—è—è/–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫–∞–Ω–∞–ª / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</code>

// <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>–ú–∞–∫—Å–∏–º –®–∞—Ä–∏–∫–æ–≤ 12.06 1215 500—Ä —Å–±–ø 1/48 –≤–Ω–µ—à–∫–∞ —Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å / –≤–µ—Ä–æ—è—Ç–Ω–æ –∫—É–ø—è—Ç –µ—â–µ</code>
‚Ä¢ <code>–ú–∞–∫—Å–∏–º –®–∞—Ä–∏–∫–æ–≤ 12.06 1215 500—Ä –∏–ø 1/48 –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å / –≤–µ—Ä–æ—è—Ç–Ω–æ –∫—É–ø—è—Ç –µ—â–µ</code>
‚Ä¢ <code>–ú–∞–∫—Å–∏–º –®–∞—Ä–∏–∫–æ–≤ 12.06 1215 500—Ä –∫—Ä–∏–ø—Ç–∞ –≤–Ω–µ—à–∫–∞ 1/48 —Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å / –≤–µ—Ä–æ—è—Ç–Ω–æ –∫—É–ø—è—Ç –µ—â–µ</code>

// <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
/money ‚Äî –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

// <b>ID —á–∞—Ç–∞:</b> <code>{message.chat.id}</code>
        """
        
        self.bot.send_message(
            message.chat.id, 
            welcome_text, 
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    def _handle_stats(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</b>

üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b>
‚Ä¢ USDT: {self.stats['total_usdt']:.2f}
‚Ä¢ –†—É–±–ª–∏: {self.stats['total_rub']:.2f} ‚ÇΩ

üìà <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:</b> {self.stats['total_sales']}

üí≥ <b>–ü–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã:</b>
"""
        
        for payment_method, count in self.stats['sales_by_payment'].items():
            stats_text += f"‚Ä¢ {payment_method}: {count}\n"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", 
            url=f"https://docs.google.com/spreadsheets/d/{self.sheets_id}"
        ))
        
        self.bot.send_message(
            message.chat.id, 
            stats_text, 
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    def _handle_reset_stats(self, message):
        """–û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            'total_usdt': 0,
            'total_rub': 0,
            'total_sales': 0,
            'sales_by_payment': {}
        }
        self.bot.send_message(
            message.chat.id,
            "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
            parse_mode='HTML'
        )
    
    def _handle_money(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /money - —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if not self.sheet:
                self._init_sheets()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            financial_data = self._get_financial_data()
            
            if not financial_data:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã",
                    parse_mode='HTML'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            money_text = f"""
üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üíµ <b>–í—ã—Ä—É—á–∫–∞:</b>
‚Ä¢ USDT: {financial_data.get('revenue_usdt', 0):.2f}
‚Ä¢ RUB: {financial_data.get('revenue_rub', 0):,.0f}

üí∏ <b>–ß–∏—Å—Ç—ã–º–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b>
‚Ä¢ USDT: {financial_data.get('net_usdt', 0):.2f}
‚Ä¢ RUB: {financial_data.get('net_rub', 0):,.0f}

üíº <b>–ö–æ–º–∏—Å—Å–∏—è —Å–µ–π–ª–∑–∞:</b>
‚Ä¢ USDT: {financial_data.get('commission_usdt', 0):.2f}
‚Ä¢ RUB: {financial_data.get('commission_rub', 0):,.0f}

üí≥ <b>–ü–æ —Ç–∏–ø–∞–º –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –°–ë–ü: {financial_data.get('sbp_count', 0)}
‚Ä¢ –ö–∞—Ä—Ç–∞: {financial_data.get('card_count', 0)}
‚Ä¢ –ö—Ä–∏–ø—Ç–∞: {financial_data.get('crypto_count', 0)}
‚Ä¢ –ò–ü: {financial_data.get('ip_count', 0)}
            """
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                "üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", 
                url=f"https://docs.google.com/spreadsheets/d/{self.sheets_id}"
            ))
            
            self.bot.send_message(
                message.chat.id,
                money_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                parse_mode='HTML'
            )
    
    def _get_financial_data(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if not self.sheet:
                return {}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            all_values = self.sheet.get_all_values()
            
            if len(all_values) < 2:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                return {}
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            financial_data = {
                'revenue_usdt': 0,
                'revenue_rub': 0,
                'net_usdt': 0,
                'net_rub': 0,
                'commission_usdt': 0,
                'commission_rub': 0,
                'sbp_count': 0,
                'card_count': 0,
                'crypto_count': 0,
                'ip_count': 0
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(all_values)}")
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ –∏—â–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            for i, row in enumerate(all_values):
                logger.info(f"–°—Ç—Ä–æ–∫–∞ {i}: {row}")
                
                if len(row) >= 19:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–ª—é—Ç–∞–º–∏ USDT –∏ RUB –≤ –∫–æ–ª–æ–Ω–∫–µ K (–∏–Ω–¥–µ–∫—Å 10)
                    if len(row) > 10 and row[10] in ['USDT', 'RUB']:
                        currency = row[10]
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª—é—Ç–∞ {currency} –≤ —Å—Ç—Ä–æ–∫–µ {i}")
                        
                        # –í—ã—Ä—É—á–∫–∞ (–∫–æ–ª–æ–Ω–∫–∞ M, –∏–Ω–¥–µ–∫—Å 12)
                        if len(row) > 12 and row[12]:
                            try:
                                revenue_str = row[12].replace(',', '').replace(' ', '').replace('‚ÇΩ', '')
                                revenue = float(revenue_str)
                                if currency == 'USDT':
                                    financial_data['revenue_usdt'] = revenue
                                elif currency == 'RUB':
                                    financial_data['revenue_rub'] = revenue
                                logger.info(f"–í—ã—Ä—É—á–∫–∞ {currency}: {revenue}")
                            except (ValueError, IndexError) as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã—Ä—É—á–∫–∏: {e}, –∑–Ω–∞—á–µ–Ω–∏–µ: {row[12]}")
                        
                        # –ß–∏—Å—Ç—ã–º–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (–∫–æ–ª–æ–Ω–∫–∞ N, –∏–Ω–¥–µ–∫—Å 13)
                        if len(row) > 13 and row[13]:
                            try:
                                net_str = row[13].replace(',', '').replace(' ', '').replace('‚ÇΩ', '')
                                net = float(net_str)
                                if currency == 'USDT':
                                    financial_data['net_usdt'] = net
                                elif currency == 'RUB':
                                    financial_data['net_rub'] = net
                                logger.info(f"–ß–∏—Å—Ç—ã–º–∏ {currency}: {net}")
                            except (ValueError, IndexError) as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å—Ç—ã—Ö: {e}, –∑–Ω–∞—á–µ–Ω–∏–µ: {row[13]}")
                        
                        # –ö–æ–º–∏—Å—Å–∏—è —Å–µ–π–ª–∑–∞ (–∫–æ–ª–æ–Ω–∫–∞ O, –∏–Ω–¥–µ–∫—Å 14)
                        if len(row) > 14 and row[14]:
                            try:
                                commission_str = row[14].replace(',', '').replace(' ', '').replace('‚ÇΩ', '')
                                commission = float(commission_str)
                                if currency == 'USDT':
                                    financial_data['commission_usdt'] = commission
                                elif currency == 'RUB':
                                    financial_data['commission_rub'] = commission
                                logger.info(f"–ö–æ–º–∏—Å—Å–∏—è {currency}: {commission}")
                            except (ValueError, IndexError) as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∏—Å—Å–∏–∏: {e}, –∑–Ω–∞—á–µ–Ω–∏–µ: {row[14]}")
                        
                        # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –æ–ø–ª–∞—Ç—ã (–∫–æ–ª–æ–Ω–∫–∏ P, Q, R, S - –∏–Ω–¥–µ–∫—Å—ã 15, 16, 17, 18)
                        if len(row) > 15 and row[15]:  # –°–ë–ü
                            try:
                                financial_data['sbp_count'] = int(row[15])
                                logger.info(f"–°–ë–ü: {row[15]}")
                            except (ValueError, IndexError):
                                pass
                        
                        if len(row) > 16 and row[16]:  # –ö–∞—Ä—Ç–∞
                            try:
                                financial_data['card_count'] = int(row[16])
                                logger.info(f"–ö–∞—Ä—Ç–∞: {row[16]}")
                            except (ValueError, IndexError):
                                pass
                        
                        if len(row) > 17 and row[17]:  # –ö—Ä–∏–ø—Ç–∞
                            try:
                                financial_data['crypto_count'] = int(row[17])
                                logger.info(f"–ö—Ä–∏–ø—Ç–∞: {row[17]}")
                            except (ValueError, IndexError):
                                pass
                        
                        if len(row) > 18 and row[18]:  # –ò–ü
                            try:
                                financial_data['ip_count'] = int(row[18])
                                logger.info(f"–ò–ü: {row[18]}")
                            except (ValueError, IndexError):
                                pass
            
            logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {financial_data}")
            return financial_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def _parse_sales_message(self, text: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        patterns = [
            # @ads_busine 17.09 17:00 148usdt –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ 1/24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å
            r'@(\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\w+)\s+(\d+/\d+)\s+(\w+)\s+(.+)',
            # –ú–∞–∫—Å–∏–º –®–∞—Ä–∏–∫–æ–≤ 12.06 1215 500—Ä —Å–±–ø 1/48 –≤–Ω–µ—à–∫–∞ —Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            r'(\w+\s+\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2}|\d{3,4})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\w+)\s+(\d+/\d+)\s+(\w+)\s+(.+)',
            # –ú–∞–∫—Å–∏–º –®–∞—Ä–∏–∫–æ–≤ 12.06 1215 500—Ä –∫—Ä–∏–ø—Ç–∞ –≤–Ω–µ—à–∫–∞ 1/48 —Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            r'(\w+\s+\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2}|\d{3,4})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\w+)\s+(\w+)\s+(\d+/\d+)\s+(.+)',
            # –¢–∞—Ä–∞—Å –õ–æ–±–∫–æ–≤ 12 –¥–µ–∫–∞–±—Ä—è 11:11 1489usdt 1/24 BusinessChannel (–±–µ–∑ @, –º–µ—Å—è—Ü —Å–ª–æ–≤–æ–º)
            r'(\w+\s+\w+)\s+(\d{1,2}\s+\w+)\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\d+/\d+)\s+(.+)',
            # –¢–∞—Ä–∞—Å –õ–æ–±–∫–æ–≤ 25.06 11:11 1489usdt 1/24 BusinessChannel (–±–µ–∑ @, –¥–∞—Ç–∞ —Å —Ç–æ—á–∫–æ–π)
            r'(\w+\s+\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\d+/\d+)\s+(.+)',
            # @maxim 12 –¥–µ–∫–∞–±—Ä—è 11:11 1489usdt 1/24 BusinessChannel (—Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ)
            r'@(\w+)\s+(\d{1,2}\s+\w+)\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\d+/\d+)\s+(.+)',
            # @maxim 12.12 11:11 1489usdt 1/24 BusinessChannel (—Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ)
            r'@(\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\d+/\d+)\s+(.+)',
            # –ö—Å–µ–Ω–∏—è –í–∞–Ω—Ç—Ä–∏–ø 1230 16.04 501—é—Å–¥—Ç 1/24 –ë–∏–ë (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ @)
            r'(\w+\s+\w+)\s+(\d{1,2}\d{2})\s+(\d{1,2}\.\d{1,2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\d+/\d+)\s+(.+)',
            # –ö—Å–µ–Ω–∏—è –í–∞–Ω—Ç—Ä–∏–ø 12:30 16.04 501—é—Å–¥—Ç 1/24 –ë–∏–ë (—Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
            r'(\w+\s+\w+)\s+(\d{1,2}:\d{2})\s+(\d{1,2}\.\d{1,2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\d+/\d+)\s+(.+)',
            # @–ø–æ—Ö—É–π 12.04 1719 522—Ä 1/24 "–ê–ù–£–°" (—Å —Ñ–æ—Ä–º–∞—Ç–æ–º)
            r'@(\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\d+/\d+)\s+(.+)',
            # @–ø–æ—Ö—É–π 12.04 17:19 522—Ä 1/24 "–ê–ù–£–°" (—Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
            r'@(\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(\d+/\d+)\s+(.+)',
            # @maxim 12 –¥–µ–∫–∞–±—Ä—è 11:11 1489usdt BusinessChannel (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞)
            r'@(\w+)\s+(\d{1,2}\s+\w+)\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(.+)',
            # @maxim 14.05 11:11 500—Ä –∫–∞–Ω–∞–ª–±–∏–∑–Ω–µ—Å (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞)
            r'@(\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(.+)',
            # @maxim 12.12 11:11 500—Ä –∫–∞–Ω–∞–ª–±–∏–∑–Ω–µ—Å (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞)
            r'@(\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(.+)',
            # @maxim 12/12 11:11 500—Ä –∫–∞–Ω–∞–ª–±–∏–∑–Ω–µ—Å (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞)
            r'@(\w+)\s+(\d{1,2}/\d{1,2})\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(.+)',
            # @maxim 12-12 11:11 500—Ä –∫–∞–Ω–∞–ª–±–∏–∑–Ω–µ—Å (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞)
            r'@(\w+)\s+(\d{1,2}-\d{1,2})\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(.+)',
            # @maxim 12 –¥–µ–∫–∞–±—Ä—è 11:11 500—Ä –∫–∞–Ω–∞–ª–±–∏–∑–Ω–µ—Å (–±–µ–∑ usdt/$)
            r'@(\w+)\s+(\d{1,2}\s+\w+)\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(—Ä|—Ä—É–±|‚ÇΩ)\s+(.+)',
            # @maxim 12.12 11:11 500—Ä –∫–∞–Ω–∞–ª–±–∏–∑–Ω–µ—Å (–±–µ–∑ usdt/$)
            r'@(\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2})\s+(\d+(?:\.\d+)?)(—Ä|—Ä—É–±|‚ÇΩ)\s+(.+)',
            # @bob 12 —è–Ω–≤ 1634 888—é—Å–¥—Ç –°–û—Å–∞–ª–æ–≤–æ (–≤—Ä–µ–º—è –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è)
            r'@(\w+)\s+(\d{1,2}\s+\w+)\s+(\d{1,2}\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(.+)',
            # @bob 12.01 1634 888—é—Å–¥—Ç –°–û—Å–∞–ª–æ–≤–æ (–¥–∞—Ç–∞ —Å —Ç–æ—á–∫–æ–π, –≤—Ä–µ–º—è –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è)
            r'@(\w+)\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}\d{2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(.+)',
            # @charlie 10/03 915 2000—é—Å–¥—Ç –ù–æ–≤—ã–π–ö–∞–Ω–∞–ª (–≤—Ä–µ–º—è —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º)
            r'@(\w+)\s+(\d{1,2}/\d{1,2})\s+(\d{1,2}\d{1,2})\s+(\d+(?:\.\d+)?)(usdt|—Ä|—Ä—É–±|\$|‚ÇΩ|—é—Å–¥—Ç)\s+(.+)',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                manager = match.group(1)
                had_at_prefix = text.strip().startswith('@')
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø
                groups = match.groups()
                
                if len(groups) == 9:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ @ –≤ –Ω–∞—á–∞–ª–µ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å @)
                    if had_at_prefix:
                        # @ads_busine 17.09 17:00 148usdt –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ 1/24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å
                        date_str = groups[1]
                        time_str = groups[2]
                        amount = float(groups[3])
                        currency = groups[4].lower()
                        payment_type = groups[5]
                        format_str = groups[6]
                        internal_external = groups[7]
                        channel = groups[8].strip()
                        channel, comment = self._split_channel_and_comment(channel)
                    else:
                        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –ú–∞–∫—Å–∏–º –®–∞—Ä–∏–∫–æ–≤ 12.06 1215 500—Ä —Å–±–ø 1/48 –≤–Ω–µ—à–∫–∞ —Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        date_str = groups[1]
                        time_str = groups[2]
                        amount = float(groups[3])
                        currency = groups[4].lower()
                        payment_type = groups[5]
                        format_str = groups[6]
                        internal_external = groups[7]
                        channel = groups[8].strip()
                        channel, comment = self._split_channel_and_comment(channel)
                elif len(groups) == 9 and ' ' in manager:
                    # –§–æ—Ä–º–∞—Ç: –ú–∞–∫—Å–∏–º –®–∞—Ä–∏–∫–æ–≤ 12.06 1215 500—Ä –∫—Ä–∏–ø—Ç–∞ –≤–Ω–µ—à–∫–∞ 1/48 —Ä—É—Å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    date_str = groups[1]
                    time_str = groups[2]
                    amount = float(groups[3])
                    currency = groups[4].lower()
                    payment_type = groups[5]
                    internal_external = groups[6]
                    format_str = groups[7]
                    channel = groups[8].strip()
                    channel, comment = self._split_channel_and_comment(channel)
                elif len(groups) == 7 and groups[5] and '/' in str(groups[5]):
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ñ–æ—Ä–º–∞—Ç–æ–º (7 –≥—Ä—É–ø–ø)
                    if ' ' in manager:
                        # –£ –Ω–∞—Å –¥–≤–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ—Ä—è–¥–∫–∞: [time, date] –∏–ª–∏ [date, time]
                        g2 = groups[1]
                        g3 = groups[2]
                        if ':' in g2 and ':' not in g3:
                            time_str = g2
                            date_str = g3
                        elif ':' in g3 and ':' not in g2:
                            time_str = g3
                            date_str = g2
                        else:
                            date_str = g2
                            time_str = g3
                    else:
                        date_str = groups[1]
                        time_str = groups[2]
                    amount = float(groups[3])
                    currency = groups[4].lower()
                    format_str = groups[5]
                    channel = groups[6].strip()
                    channel, comment = self._split_channel_and_comment(channel)
                    payment_type = ""
                    internal_external = ""
                elif len(groups) == 6:
                    # –§–æ—Ä–º–∞—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞ (6 –≥—Ä—É–ø–ø)
                    date_str = groups[1]
                    time_str = groups[2]
                    amount = float(groups[3])
                    currency = groups[4].lower()
                    format_str = ""
                    channel = groups[5].strip()
                    channel, comment = self._split_channel_and_comment(channel)
                    payment_type = ""
                    internal_external = ""
                else:
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ @ (–∏–º—è —Ñ–∞–º–∏–ª–∏—è ...)
                    g2 = groups[1]
                    g3 = groups[2]
                    if ':' in g2 and ':' not in g3:
                        time_str = g2
                        date_str = g3
                    elif ':' in g3 and ':' not in g2:
                        time_str = g3
                        date_str = g2
                    else:
                        date_str = g2
                        time_str = g3
                    amount = float(groups[3])
                    currency = groups[4].lower()
                    format_str = groups[5]
                    channel = groups[6].strip()
                    channel, comment = self._split_channel_and_comment(channel)
                    payment_type = ""
                    internal_external = ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º @ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                if had_at_prefix and not manager.startswith('@'):
                    manager = f"@{manager}"
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
                if ':' not in time_str:
                    if len(time_str) == 4:
                        time_str = f"{time_str[:2]}:{time_str[2:]}"
                    elif len(time_str) == 3:
                        time_str = f"0{time_str[0]}:{time_str[1:]}"
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
                if currency in ['—Ä', '—Ä—É–±', '‚ÇΩ']:
                    currency = 'RUB'
                elif currency in ['usdt', '$', '—é—Å–¥—Ç']:
                    currency = 'USDT'
                else:
                    # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                    if 'usdt' in text.lower() or '$' in text or '—é—Å–¥—Ç' in text.lower():
                        currency = 'USDT'
                    else:
                        currency = 'RUB'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É–±–ª–∏
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
                payment_type = self._normalize_payment_type(payment_type)
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω—è—è/–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è
                internal_external = self._normalize_internal_external(internal_external)
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ date_str –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è (–¥–≤–æ–µ—Ç–æ—á–∏–µ)
                    if ':' in date_str:
                        logger.error(f"–û—à–∏–±–∫–∞: date_str —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è: {date_str}")
                        continue
                    
                    if '.' in date_str:
                        # –§–æ—Ä–º–∞—Ç 14.05 –∏–ª–∏ 12.12
                        day, month = date_str.split('.')
                        current_year = datetime.now().year
                        parsed_date = datetime(current_year, int(month), int(day))
                    elif '/' in date_str:
                        # –§–æ—Ä–º–∞—Ç 14/05 –∏–ª–∏ 12/12
                        day, month = date_str.split('/')
                        current_year = datetime.now().year
                        parsed_date = datetime(current_year, int(month), int(day))
                    elif '-' in date_str:
                        # –§–æ—Ä–º–∞—Ç 14-05 –∏–ª–∏ 12-12
                        day, month = date_str.split('-')
                        current_year = datetime.now().year
                        parsed_date = datetime(current_year, int(month), int(day))
                    else:
                        # –§–æ—Ä–º–∞—Ç "12 –¥–µ–∫–∞–±—Ä—è" –∏–ª–∏ "12 —è–Ω–≤"
                        month_names = {
                            # –ü–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                            '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
                            '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
                            '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12,
                            # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                            '—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, '–∞–ø—Ä': 4,
                            '–º–∞–π': 5, '–∏—é–Ω': 6, '–∏—é–ª': 7, '–∞–≤–≥': 8,
                            '—Å–µ–Ω': 9, '–æ–∫—Ç': 10, '–Ω–æ—è': 11, '–¥–µ–∫': 12
                        }
                        parts = date_str.split()
                        if len(parts) < 2:
                            logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
                            continue
                        day = int(parts[0])
                        month = month_names.get(parts[1].lower(), 1)
                        current_year = datetime.now().year
                        parsed_date = datetime(current_year, month, day)
                    
                    return {
                        'manager': manager,
                        'date': parsed_date.strftime('%d.%m.%Y'),
                        'time': time_str,
                        'amount': amount,
                        'currency': currency,
                        'payment_type': payment_type,
                        'format': format_str,
                        'internal_external': internal_external,
                        'channel': channel,
                        'comment': comment
                    }
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
                    continue
        
        return None
    
    def _validate_format(self, format_str: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ - –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 1/24 –∏–ª–∏ 1/48"""
        if not format_str:
            return True  # –ü—É—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ø—É—Å—Ç–∏–º
        
        valid_formats = ['1/24', '1/48']
        return format_str in valid_formats
    
    def _add_to_sheets(self, data: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ç—ã—Å—è—á
            amount_str = self._format_amount(data['amount'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å, –î–∞—Ç–∞, –í—Ä–µ–º—è, –°—É–º–º–∞, –í–∞–ª—é—Ç–∞, –¢–∏–ø –æ–ø–ª–∞—Ç—ã, –§–æ—Ä–º–∞—Ç, –í–Ω–µ—à–Ω—è—è/–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è, –ö–∞–Ω–∞–ª –≥–¥–µ –±—ã–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            row = [
                str(data['manager']).strip(),  # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å (–±–µ–∑ @, —Ç–∞–∫ –∫–∞–∫ @ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø–∞—Ä—Å–µ—Ä–µ)
                data['date'],  # –î–∞—Ç–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                data['time'],  # –í—Ä–µ–º—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                float(amount_str),  # –°—É–º–º–∞ –∫–∞–∫ —á–∏—Å–ª–æ
                str(data['currency']).strip(),  # –í–∞–ª—é—Ç–∞
                str(data.get('payment_type', '')).strip(),  # –¢–∏–ø –æ–ø–ª–∞—Ç—ã
                str(data.get('format', '')).strip(),  # –§–æ—Ä–º–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
                str(data.get('internal_external', '')).strip(),  # –í–Ω–µ—à–Ω—è—è/–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è
                str(data['channel']).strip(),  # –ö–∞–Ω–∞–ª
                str(data.get('comment', '')).strip()  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ]
            
            if self.sheet:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                next_row = len(self.sheet.get_all_values()) + 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
                self.sheet.update(f'A{next_row}:J{next_row}', [row], value_input_option='USER_ENTERED')
                logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É: {data}")
            else:
                logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏: {data}")
                logger.info(f"–°—Ç—Ä–æ–∫–∞ –¥–ª—è Google Sheets: {row}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Sheets: {e}")
            raise
    
    def _format_amount(self, amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤"""
        if amount.is_integer():
            # –î–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
            return str(int(amount))
        else:
            # –î–ª—è –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª
            return str(amount)
    
    def _update_stats(self, data: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats['total_sales'] += 1
        
        if data['currency'] == 'USDT':
            self.stats['total_usdt'] += data['amount']
        elif data['currency'] == 'RUB':
            self.stats['total_rub'] += data['amount']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
        payment_key = f"{data['currency']}"
        self.stats['sales_by_payment'][payment_key] = self.stats['sales_by_payment'].get(payment_key, 0) + 1
    
    def _handle_sales_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
        text = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        parsed_data = self._parse_sales_message(text)
        
        if parsed_data:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
            if not self._validate_format(parsed_data.get('format', '')):
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞!</b>\n\n"
                    "–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    "‚Ä¢ <code>1/24</code>\n"
                    "‚Ä¢ <code>1/48</code>\n\n"
                    "–î—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.",
                    parse_mode='HTML'
                )
                return
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
                self._add_to_sheets(parsed_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_stats(parsed_data)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(
                    "üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", 
                    url=f"https://docs.google.com/spreadsheets/d/{self.sheets_id}"
                ))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirmation_text = f"""
‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —É—á–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @{message.from_user.username}</b>

üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {parsed_data['manager']}
üìÖ <b>–î–∞—Ç–∞:</b> {parsed_data['date']}
üïê <b>–í—Ä–µ–º—è:</b> {parsed_data['time']}
üí∞ <b>–°—É–º–º–∞:</b> {parsed_data['amount']} {parsed_data['currency']}
üí≥ <b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> {parsed_data.get('payment_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìã <b>–§–æ—Ä–º–∞—Ç:</b> {parsed_data.get('format', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè¢ <b>–í–Ω–µ—à–Ω—è—è/–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è:</b> {parsed_data.get('internal_external', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì∫ <b>–ö–∞–Ω–∞–ª:</b> {parsed_data['channel']}
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {parsed_data.get('comment', '–ù–µ—Ç')}
                """
                
                self.bot.send_message(
                    message.chat.id,
                    confirmation_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç
                parsed_data['manager_username'] = message.from_user.username
                self._send_notification(parsed_data)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –ø—Ä–æ–¥–∞–∂–∞
            self.bot.send_message(
                message.chat.id,
                "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "<code>@–º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—Ç–∞ –≤—Ä–µ–º—è —Å—É–º–º–∞ [—Ñ–æ—Ä–º–∞—Ç] –∫–∞–Ω–∞–ª</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ <code>@maxim 12 –¥–µ–∫–∞–±—Ä—è 11:11 1489usdt 1/24 BusinessChannel</code>\n"
                "‚Ä¢ <code>@anna 14.05 11:11 500—Ä –∫–∞–Ω–∞–ª–±–∏–∑–Ω–µ—Å</code>\n\n"
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> 1/24, 1/48",
                parse_mode='HTML'
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –£–¥–∞–ª—è–µ–º webhook –∏ –æ—á–∏—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            self.bot.remove_webhook()
            import time
            time.sleep(3)
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            self.bot.get_updates(offset=-1)
            time.sleep(2)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        
        max_retries = 5
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                self.bot.polling(none_stop=True, interval=0, timeout=20)
                break
            except Exception as e:
                retry_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
                
                if "409" in str(e) or "Conflict" in str(e):
                    logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç 409, –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω—è—Ç—å webhook –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                    try:
                        self.bot.remove_webhook()
                        import time
                        time.sleep(5)
                        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                        self.bot.get_updates(offset=-1)
                        time.sleep(5)
                    except Exception as webhook_error:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å webhook: {webhook_error}")
                
                if retry_count < max_retries:
                    import time
                    time.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                else:
                    logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞")
                    raise

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Sales Bot...")
        bot = SalesBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
